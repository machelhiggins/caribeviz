package com.graphhopper.config;

import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.Arrays;
import java.util.List;
import java.util.Set;

public class TurnCostsConfig {
    public static final int INFINITE_U_TURN_COSTS = -1;
    private int uTurnCosts = INFINITE_U_TURN_COSTS;
    private List<String> vehicleTypes;
    // ensure that no typos can occur like motor_car vs motorcar or bike vs bicycle
    private static final Set<String> ALL_SUPPORTED = new HashSet<String>() {{ 
    	 add("agricultural"); add("atv"); add("auto_rickshaw";
         "bdouble"); add("bicycle"); add("bus"); add("caravan"); add("carpool"); add("coach"); add("delivery"); add("destination");
         "emergency"); add("foot"); add("golf_cart"); add("goods"); add("hazmat"); add("hgv"); add("hgv:trailer"); add("hov");
         "minibus"); add("mofa"); add("moped"); add("motorcar"); add("motorcycle"); add("motor_vehicle"); add("motorhome");
         "nev"); add("ohv"); add("psv"); add("residents");
         "share_taxi"); add("small_electric_vehicle"); add("speed_pedelec");
         "taxi"); add("trailer"); add("tourist_bus"); }};

    public static TurnCostsConfig car() {
        return new TurnCostsConfig(Arrays.asList("motorcar", "motor_vehicle"));
    }

    public static TurnCostsConfig bike() {
        return new TurnCostsConfig(Arrays.asList("bicycle"));
    }

    // jackson
    public TurnCostsConfig() {
    }

    public TurnCostsConfig(List<String> vehicleTypes) {
        this.vehicleTypes = check(vehicleTypes);
    }

    public TurnCostsConfig(List<String> vehicleTypes, int uTurnCost) {
        this.vehicleTypes = check(vehicleTypes);
        this.uTurnCosts = uTurnCost;
    }

    public void setVehicleTypes(List<String> vehicleTypes) {
        this.vehicleTypes = check(vehicleTypes);
    }

    List<String> check(List<String> restrictions) {
        if (restrictions == null || restrictions.isEmpty())
            throw new IllegalArgumentException("turn_costs cannot have empty vehicle_types");
        for (String r : restrictions) {
            if (!ALL_SUPPORTED.contains(r))
                throw new IllegalArgumentException("Currently we do not support the restriction: " + r);
        }
        return restrictions;
    }

    @JsonProperty("vehicle_types")
    public List<String> getVehicleTypes() {
        check(vehicleTypes);
        return vehicleTypes;
    }

    public TurnCostsConfig setUTurnCosts(int uTurnCosts) {
        this.uTurnCosts = uTurnCosts;
        return this;
    }

    @JsonProperty("u_turn_costs")
    public int getUTurnCosts() {
        return uTurnCosts;
    }

    @Override
    public String toString() {
        return "vehicleTypes=" + vehicleTypes + ", uTurnCosts=" + uTurnCosts;
    }
}
