1.ready: jQuery.isReady (2)
2.ready: jQuery ready (10)
3.basic: ajax (4)
4.basic: attributes (6)
5.basic: css (3)
6.basic: core (28)
7.basic: data (4)
8.basic: dimensions (3)
9.basic: event (1)
10.basic: manipulation (5)
11.basic: offset (3)
12.basic: selector (2)
13.basic: serialize (2)
14.basic: traversing (12)
15.basic: wrap (3)
16.core: Basic requirements (7)
17.core: jQuery() (30)
18.core: jQuery(selector, context) (3)
19.core: selector state (18)
20.core: globalEval (2)
21.core: noConflict (7)
22.core: noConflict  (7)
23.core: trim (13)
24.core: type (28)
25.core: type for `Symbol` (0)
26.core: isPlainObject (16)
27.skippedcore: isPlainObject(Symbol) (0)
28.core: isFunction (19)
29.core: isNumeric (38)
30.skippedcore: isNumeric(Symbol) (0)
31.core: isXMLDoc - HTML (4)
32.core: XSS via location.hash (1)
33.core: isXMLDoc - XML (3)
34.core: isWindow (14)
35.core: jQuery('html') (18)
36.core: jQuery(tag-hyphenated elements) gh-1987 (17)
37.core: jQuery('massive html #7990') (3)
38.core: jQuery('html', context) (1)
39.core: jQuery(selector, xml).text(str) - loaded via xml document (2)
40.core: end() (3)
41.core: length (1)
42.core: get() (1)
43.core: toArray() (1)
44.core: inArray() (19)
45.core: get(Number) (2)
46.core: get(-Number) (2)
47.core: each(Function) (1)
48.core: slice() (7)
49.core: first()/last() (4)
50.core: map() (2)
51.core: jQuery.map (25)
52.core: jQuery.merge() (10)
53.core: jQuery.grep() (8)
54.core: jQuery.grep(Array-like) (7)
55.core: jQuery.extend(Object, Object) (28)
56.core: jQuery.extend(Object, Object {created with "defineProperties"}) (2)
57.core: jQuery.each(Object,Function) (23)
58.core: jQuery.each/map(undefined/null,Function) (1)
59.core: JIT compilation does not interfere with length retrieval (gh-2145) (4)
60.core: jQuery.makeArray (15)
61.core: jQuery.inArray (3)
62.core: jQuery.isEmptyObject (2)
63.core: jQuery.proxy (9)
64.core: jQuery.parseHTML (17)
65.core: jQuery.parseHTML  (1)
66.core: jQuery.parseJSON (20)
67.core: jQuery.parseXML (8)
68.core: jQuery.camelCase() (7)
69.core: Conditional compilation compatibility (#13274) (3)
70.core: document ready when jQuery loaded asynchronously (#13655) (1)
71.core: Tolerating alias-masked DOM properties (#14074) (1)
72.core: Don't call window.onready (#14802) (1)
73.core: Iterability of jQuery objects (gh-1693) (1)
74.callbacks: jQuery.Callbacks( '' ) - no filter (28)
75.callbacks: jQuery.Callbacks( { } ) - no filter (28)
76.callbacks: jQuery.Callbacks( '' ) - filter (28)
77.callbacks: jQuery.Callbacks( { } ) - filter (28)
78.callbacks: jQuery.Callbacks( 'once' ) - no filter (28)
79.callbacks: jQuery.Callbacks( { 'once': true } ) - no filter (28)
80.callbacks: jQuery.Callbacks( 'once' ) - filter (28)
81.callbacks: jQuery.Callbacks( { 'once': true } ) - filter (28)
82.callbacks: jQuery.Callbacks( 'memory' ) - no filter (28)
83.callbacks: jQuery.Callbacks( { 'memory': true } ) - no filter (28)
84.callbacks: jQuery.Callbacks( 'memory' ) - filter (28)
85.callbacks: jQuery.Callbacks( { 'memory': true } ) - filter (28)
86.callbacks: jQuery.Callbacks( 'unique' ) - no filter (28)
87.callbacks: jQuery.Callbacks( { 'unique': true } ) - no filter (28)
88.callbacks: jQuery.Callbacks( 'unique' ) - filter (28)
89.callbacks: jQuery.Callbacks( { 'unique': true } ) - filter (28)
90.callbacks: jQuery.Callbacks( 'stopOnFalse' ) - no filter (28)
91.callbacks: jQuery.Callbacks( { 'stopOnFalse': true } ) - no filter (28)
92.callbacks: jQuery.Callbacks( 'stopOnFalse' ) - filter (28)
93.callbacks: jQuery.Callbacks( { 'stopOnFalse': true } ) - filter (28)
94.callbacks: jQuery.Callbacks( 'once memory' ) - no filter (28)
95.callbacks: jQuery.Callbacks( { 'once': true, 'memory': true } ) - no filter (28)
96.callbacks: jQuery.Callbacks( 'once memory' ) - filter (28)
97.callbacks: jQuery.Callbacks( { 'once': true, 'memory': true } ) - filter (28)
98.callbacks: jQuery.Callbacks( 'once unique' ) - no filter (28)
99.callbacks: jQuery.Callbacks( { 'once': true, 'unique': true } ) - no filter (28)
100.callbacks: jQuery.Callbacks( 'once unique' ) - filter (28)
101.callbacks: jQuery.Callbacks( { 'once': true, 'unique': true } ) - filter (28)
102.callbacks: jQuery.Callbacks( 'once stopOnFalse' ) - no filter (28)
103.callbacks: jQuery.Callbacks( { 'once': true, 'stopOnFalse': true } ) - no filter (28)
104.callbacks: jQuery.Callbacks( 'once stopOnFalse' ) - filter (28)
105.callbacks: jQuery.Callbacks( { 'once': true, 'stopOnFalse': true } ) - filter (28)
106.callbacks: jQuery.Callbacks( 'memory unique' ) - no filter (28)
107.callbacks: jQuery.Callbacks( { 'memory': true, 'unique': true } ) - no filter (28)
108.callbacks: jQuery.Callbacks( 'memory unique' ) - filter (28)
109.callbacks: jQuery.Callbacks( { 'memory': true, 'unique': true } ) - filter (28)
110.callbacks: jQuery.Callbacks( 'memory stopOnFalse' ) - no filter (28)
111.callbacks: jQuery.Callbacks( { 'memory': true, 'stopOnFalse': true } ) - no filter (28)
112.callbacks: jQuery.Callbacks( 'memory stopOnFalse' ) - filter (28)
113.callbacks: jQuery.Callbacks( { 'memory': true, 'stopOnFalse': true } ) - filter (28)
114.callbacks: jQuery.Callbacks( 'unique stopOnFalse' ) - no filter (28)
115.callbacks: jQuery.Callbacks( { 'unique': true, 'stopOnFalse': true } ) - no filter (28)
116.callbacks: jQuery.Callbacks( 'unique stopOnFalse' ) - filter (28)
117.callbacks: jQuery.Callbacks( { 'unique': true, 'stopOnFalse': true } ) - filter (28)
118.callbacks: jQuery.Callbacks( options ) - options are copied (1)
119.callbacks: jQuery.Callbacks.fireWith - arguments are copied (1)
120.callbacks: jQuery.Callbacks.remove - should remove all instances (1)
121.callbacks: jQuery.Callbacks.has (13)
122.callbacks: jQuery.Callbacks() - adding a string doesn't cause a stack overflow (1)
123.callbacks: jQuery.Callbacks() - disabled callback doesn't fire (gh-1790) (1)
124.deferred: jQuery.Deferred (23)
125.deferred: jQuery.Deferred - new operator (23)
126.deferred: jQuery.Deferred - chainability (10)
127.deferred: jQuery.Deferred.then - filtering (done) (4)
128.deferred: jQuery.Deferred.then - filtering (fail) (4)
129.deferred: jQuery.Deferred.then - filtering (progress) (3)
130.deferred: jQuery.Deferred.then - deferred (done) (3)
131.deferred: jQuery.Deferred.then - deferred (fail) (3)
132.deferred: jQuery.Deferred.then - deferred (progress) (3)
133.deferred: jQuery.Deferred.then - context (7)
134.deferred: jQuery.when (37)
135.deferred: jQuery.when - joined (119)
136.deferred: jQuery.when - resolved (6)
137.deprecated: bind/unbind (4)
138.deprecated: delegate/undelegate (2)
139.deprecated: size() (1)
140.support: zoom of doom (#13089) (1)
141.support: body background is not lost if set prior to loading jQuery (#9239) (2)
142.support: box-sizing does not affect jQuery.support.shrinkWrapBlocks (1)
143.support: A background on the testElement does not cause IE8 to crash (#9823) (1)
144.support: Check CSP (https://developer.mozilla.org/en-US/docs/Security/CSP) restrictions (2)
145.support: Verify that support tests resolve as expected per browser (38)
146.data: expando (1)
147.data: jQuery.data(div) (25)
148.data: jQuery.data({}) (25)
149.data: jQuery.data(window) (25)
150.data: jQuery.data(document) (25)
151.data: Expando cleanup (4)
152.data: Data is not being set on comment and text nodes (2)
153.data: acceptData (10)
154.data: jQuery().data() === undefined (#14101) (2)
155.data: .data() (5)
156.data: jQuery(Element).data(String, Object).data(String) (18)
157.data: jQuery(plain Object).data(String, Object).data(String) (16)
158.data: data-* attributes (43)
159.data: .data(Object) (4)
160.data: jQuery.removeData (10)
161.data: .removeData() (6)
162.data: JSON serialization (#8108) (1)
163.data: jQuery.data should follow html5 specification regarding camel casing (10)
164.data: jQuery.data should not miss data with preset hyphenated property names (2)
165.data: .data supports interoperable hyphenated/camelCase get/set of properties with arbitrary non-null|NaN|undefined values (24)
166.data: jQuery.data supports interoperable hyphenated/camelCase get/set of properties with arbitrary non-null|NaN|undefined values (24)
167.data: .removeData supports removal of hyphenated properties via array (#12786) (4)
168.data: Triggering the removeData should not throw exceptions. (#10080) (1)
169.data: Only check element attributes once when calling .data() - #8909 (2)
170.data: JSON data- attributes can have newlines (1)
171.data: enumerate data attrs on body (#14894) (1)
172.data: .data(prop) does not create expando (1)
173.queue: queue() with other types (14)
174.queue: queue(name) passes in the next item in the queue as a parameter (2)
175.queue: queue() passes in the next item in the queue as a parameter to fx queues (3)
176.queue: callbacks keep their place in the queue (5)
177.queue: delay() (2)
178.queue: clearQueue(name) clears the queue (2)
179.queue: clearQueue() clears the fx queue (1)
180.queue: fn.promise() - called when fx queue is empty (3)
181.queue: fn.promise( "queue" ) - called whenever last queue function is dequeued (5)
182.queue: fn.promise( "queue" ) - waits for animation to complete before resolving (2)
183.queue: .promise(obj) (2)
184.queue: delay() can be stopped (3)
185.queue: queue stop hooks (2)
186.attributes: jQuery.propFix integrity test (1)
187.attributes: attr(String) (50)
188.attributes: attr(String) on cloned elements, #9646 (4)
189.attributes: attr(String) in XML Files (3)
190.attributes: attr(String, Function) (2)
191.attributes: attr(Hash) (3)
192.attributes: attr(String, Object) (71)
193.attributes: attr - extending the boolean attrHandle (1)
194.attributes: attr(String, Object) - Loaded via XML document (2)
195.attributes: attr(String, Object) - Loaded via XML fragment (2)
196.attributes: attr('tabindex') (8)
197.attributes: attr('tabindex', value) (9)
198.attributes: removeAttr(String) (12)
199.attributes: removeAttr(String) in XML (7)
200.attributes: removeAttr(Multi String, variable space width) (8)
201.attributes: prop(String, Object) (17)
202.attributes: prop(String, Object) on null/undefined (14)
203.attributes: prop('tabindex') (11)
204.attributes: image.prop( 'tabIndex' ) (1)
205.attributes: prop('tabindex', value) (10)
206.attributes: removeProp(String) (6)
207.attributes: val() after modification (1)
208.attributes: val() (26)
209.attributes: val() with non-matching values on dropdown list (3)
210.attributes: val(String/Number) (9)
211.attributes: val(Function) (9)
212.attributes: val(Array of Numbers) (Bug #7123) (4)
213.attributes: val(Function) with incoming value (10)
214.attributes: val(select) after form.reset() (Bug #2551) (3)
215.attributes: addClass(String) (9)
216.attributes: addClass(Function) (9)
217.attributes: addClass(Function) with incoming value (52)
218.attributes: removeClass(String) - simple (8)
219.attributes: removeClass(Function) - simple (8)
220.attributes: removeClass(Function) with incoming value (52)
221.attributes: removeClass() removes duplicates (1)
222.attributes: removeClass(undefined) is a no-op (1)
223.attributes: toggleClass(String|boolean|undefined[, boolean]) (19)
224.attributes: toggleClass(Function[, boolean]) (19)
225.attributes: toggleClass(Function[, boolean]) with incoming value (14)
226.attributes: addClass, removeClass, hasClass (17)
227.attributes: addClass, removeClass, hasClass on many elements (19)
228.attributes: contents().hasClass() returns correct values (2)
229.attributes: hasClass correctly interprets non-space separators (#13835) (4)
230.attributes: coords returns correct values in IE6/IE7, see #10828 (1)
231.attributes: should not throw at $(option).val() (#14686) (1)
232.attributes: option value not trimmed when setting via parent select (1)
233.attributes: Insignificant white space returned for $(option).val() (#14858) (3)
234.attributes: SVG class manipulation (gh-2199) (12)
235.event: null or undefined handler (2)
236.event: on() with non-null,defined data (2)
237.event: Handler changes and .trigger() order (1)
238.event: on(), with data (4)
239.event: click(), with data (3)
240.event: on(), with data, trigger with data (4)
241.event: on(), multiple events at once (2)
242.event: on(), five events at once (1)
243.event: on(), multiple events at once and namespaces (7)
244.event: on(), namespace with special add (27)
245.event: on(), no data (1)
246.event: on/one/off(Object) (6)
247.event: on/off(Object), on/off(Object, String) (6)
248.event: on immediate propagation (2)
249.event: on bubbling, isDefaultPrevented, stopImmediatePropagation (3)
250.event: on(), iframes (1)
251.event: on(), trigger change on select (5)
252.event: on(), namespaced events, cloned events (18)
253.event: on(), multi-namespaced events (6)
254.event: namespace-only event binding is a no-op (2)
255.event: Empty namespace is ignored (1)
256.event: on(), with same function (2)
257.event: on(), make sure order is maintained (1)
258.event: on(), with different this object (4)
259.event: on(name, false), off(name, false) (3)
260.event: on(name, selector, false), off(name, selector, false) (3)
261.event: on()/trigger()/off() on plain object (7)
262.event: off(type) (1)
263.event: off(eventObject) (4)
264.event: hover() mouseenter mouseleave (1)
265.event: mouseover triggers mouseenter (1)
266.event: pointerover triggers pointerenter (1)
267.event: withinElement implemented with jQuery.contains() (1)
268.event: mouseenter, mouseleave don't catch exceptions (2)
269.event: trigger() shortcuts (6)
270.event: trigger() bubbling (18)
271.event: trigger(type, [data], [fn]) (16)
272.event: submit event bubbles on copied forms (#11649) (3)
273.event: change event bubbles on copied forms (#11796) (3)
274.event: trigger(eventObject, [data], [fn]) (28)
275.event: .trigger() bubbling on disconnected elements (#10489) (2)
276.event: .trigger() doesn't bubble load event (#10717) (1)
277.event: Delegated events in SVG (#10791; #13180) (2)
278.event: Delegated events in forms (#10844; #11145; #8165; #11382, #11764) (5)
279.event: Submit event can be stopped (#11049) (1)
280.event: on(beforeunload) (4)
281.event: jQuery.Event( type, props ) (6)
282.event: jQuery.Event properties (12)
283.event: .on()/.off() (65)
284.event: jQuery.off using dispatched jQuery.Event (1)
285.event: delegated event with delegateTarget-relative selector (3)
286.event: delegated event with selector matching Object.prototype property (#13203) (1)
287.event: delegated event with intermediate DOM manipulation (#13208) (1)
288.event: stopPropagation() stops directly-bound events on delegated target (1)
289.event: off all bound delegated events (2)
290.event: on with multiple delegated events (1)
291.event: delegated on with change (8)
292.event: delegated on with submit (2)
293.event: delegated off() with only namespaces (2)
294.event: Non DOM element events (1)
295.event: inline handler returning false stops default (1)
296.event: window resize (2)
297.event: focusin bubbles (2)
298.event: custom events with colons (#3533, #8272) (1)
299.event: .on and .off (9)
300.event: special on name mapping (7)
301.event: .on and .off, selective mixed removal (#10705) (7)
302.event: .on( event-map, null-selector, data ) #11130 (1)
303.event: clone() delegated events (#11076) (3)
304.event: checkbox state (#3827) (9)
305.event: hover event no longer special since 1.9 (1)
306.event: fixHooks extensions (2)
307.event: drag/drop events copy mouse-related event properties (gh-1925, gh-2009) (4)
308.event: focusin using non-element targets (2)
309.event: focusin from an iframe (1)
310.event: jQuery.ready promise (1)
311.event: Focusing iframe element (1)
312.event: triggerHandler(onbeforeunload) (1)
313.event: jQuery.ready synchronous load with long loading subresources (1)
314.event: change handler should be detached from element (2)
315.event: trigger click on checkbox, fires change event (1)
316.event: Namespace preserved when passed an Event (#12739) (4)
317.event: make sure events cloned correctly (18)
318.event: String.prototype.namespace does not cause trigger() to throw (#13360) (1)
319.event: Inline event result is returned (#13993) (1)
320.event: .off() removes the expando when there's no more data (2)
321.event: preventDefault() on focusin does not throw exception (1)
322.event: Donor event interference (10)
323.event: originalEvent property for IE8 (1)
324.event: originalEvent property for Chrome, Safari, Fx & Edge of simulated event (1)
325.event: Check order of focusin/focusout events (2)
326.event: focus-blur order (#12868) (5)
327.selector: element - jQuery only (7)
328.selector: id (26)
329.selector: class - jQuery only (4)
330.selector: name (5)
331.selector: selectors with comma (4)
332.selector: child and adjacent (27)
333.selector: attributes (54)
334.selector: disconnected nodes (1)
335.selector: disconnected nodes - jQuery only (3)
336.selector: attributes - jQuery.attr (35)
337.selector: jQuery.contains (16)
338.selector: jQuery.uniqueSort (15)
339.selector: Sizzle cache collides with multiple Sizzles on a page (4)
340.selector: Iframe dispatch should not affect jQuery (#13936) (1)
341.traversing: find(String) (1)
342.traversing: find(String) under non-elements (2)
343.traversing: find(leading combinator) (4)
344.traversing: find(node|jQuery object) (13)
345.traversing: is(String|undefined) (23)
346.traversing: is() against non-elements (#10178) (14)
347.traversing: is(jQuery) (19)
348.traversing: is() with :has() selectors (6)
349.traversing: is() with positional selectors (27)
350.traversing: index() (2)
351.traversing: index(Object|String|undefined) (16)
352.traversing: filter(Selector|undefined) (9)
353.traversing: filter(Function) (2)
354.traversing: filter(Element) (1)
355.traversing: filter(Array) (1)
356.traversing: filter(jQuery) (1)
357.traversing: filter() with positional selectors (19)
358.traversing: closest() (13)
359.traversing: closest() with positional selectors (1, 1, 2)
360.traversing: closest(jQuery) (8)
361.traversing: not(Selector|undefined) (11)
362.traversing: not(Element) (1)
363.traversing: not(Function) (1)
364.traversing: not(Array) (2)
365.traversing: not(jQuery) (1)
366.traversing: has(Element) (3)
367.traversing: has(Selector) (5)
368.traversing: has(Arrayish) (4)
369.traversing: addBack() (5)
370.traversing: siblings([String]) (6)
371.traversing: siblings([String]) - jQuery only (2)
372.traversing: children([String]) (2)
373.traversing: children([String]) - jQuery only (1)
374.traversing: parent([String]) (6)
375.traversing: parents([String]) (6)
376.traversing: parentsUntil([String]) (10)
377.traversing: next([String]) (6)
378.traversing: prev([String]) (5)
379.traversing: nextAll([String]) (5)
380.traversing: prevAll([String]) (5)
381.traversing: nextUntil([String]) (12)
382.traversing: prevUntil([String]) (11)
383.traversing: contents() (12)
384.traversing: sort direction (12)
385.traversing: add(String selector) (2)
386.traversing: add(String selector, String context) (1)
387.traversing: add(String html) (3)
388.traversing: add(jQuery) (4)
389.traversing: add(Element) (2)
390.traversing: add(Array elements) (1)
391.traversing: add(Window) (1)
392.traversing: add(NodeList|undefined|HTMLFormElement|HTMLSelectElement) (4)
393.traversing: add(String, Context) (6)
394.traversing: eq('-1') #10616 (3)
395.traversing: index(no arg) #10977 (2)
396.traversing: traversing non-elements with attribute filters (#12523) (5)
397.manipulation: text() (5)
398.manipulation: text(undefined) (1)
399.manipulation: text(String) (7)
400.manipulation: text(Function) (7)
401.manipulation: text(Function) with incoming value (2)
402.manipulation: append(String|Element|Array<Element>|jQuery) (78)
403.manipulation: append(Function) (78)
404.manipulation: append(param) to object, see #11280 (5)
405.manipulation: append(Function) returns String (4)
406.manipulation: append(Function) returns Element (2)
407.manipulation: append(Function) returns Array<Element> (2)
408.manipulation: append(Function) returns jQuery (2)
409.manipulation: append(Function) returns Number (2)
410.manipulation: XML DOM manipulation (#9960) (5)
411.manipulation: append the same fragment with events (Bug #6997, 5566) (2)
412.manipulation: append HTML5 sectioning elements (Bug #6485) (2)
413.manipulation: HTML5 Elements inherit styles from style rules (Bug #10501) (1)
414.manipulation: html(String) with HTML5 (Bug #6485) (2)
415.manipulation: html(String) tag-hyphenated elements (Bug #1987) (27)
416.manipulation: IE8 serialization bug (2)
417.manipulation: html() object element #10324 (1)
418.manipulation: append(xml) (1)
419.manipulation: appendTo(String) (4)
420.manipulation: appendTo(Element|Array<Element>) (2)
421.manipulation: appendTo(jQuery) (10)
422.manipulation: prepend(String) (2)
423.manipulation: prepend(Element) (1)
424.manipulation: prepend(Array<Element>) (1)
425.manipulation: prepend(jQuery) (1)
426.manipulation: prepend(Array<jQuery>) (1)
427.manipulation: prepend(Function) with incoming value -- String (4)
428.manipulation: prepend(Function) with incoming value -- Element (2)
429.manipulation: prepend(Function) with incoming value -- Array<Element> (2)
430.manipulation: prepend(Function) with incoming value -- jQuery (2)
431.manipulation: prependTo(String) (2)
432.manipulation: prependTo(Element) (1)
433.manipulation: prependTo(Array<Element>) (1)
434.manipulation: prependTo(jQuery) (1)
435.manipulation: prependTo(Array<jQuery>) (1)
436.manipulation: before(String) (1)
437.manipulation: before(Element) (1)
438.manipulation: before(Array<Element>) (1)
439.manipulation: before(jQuery) (1)
440.manipulation: before(Array<jQuery>) (1)
441.manipulation: before(Function) -- Returns String (1)
442.manipulation: before(Function) -- Returns Element (1)
443.manipulation: before(Function) -- Returns Array<Element> (1)
444.manipulation: before(Function) -- Returns jQuery (1)
445.manipulation: before(Function) -- Returns Array<jQuery> (1)
446.manipulation: before(no-op) (2)
447.manipulation: before and after w/ empty object (#10812) (1)
448.manipulation: .before() and .after() disconnected node (2)
449.manipulation: insert with .before() on disconnected node last (1)
450.manipulation: insert with .before() on disconnected node first (1)
451.manipulation: insert with .before() on disconnected node last  (1)
452.manipulation: insert with .before() on disconnected node last  (1)
453.manipulation: insertBefore(String) (1)
454.manipulation: insertBefore(Element) (1)
455.manipulation: insertBefore(Array<Element>) (1)
456.manipulation: insertBefore(jQuery) (1)
457.manipulation: .after(String) (1)
458.manipulation: .after(Element) (1)
459.manipulation: .after(Array<Element>) (1)
460.manipulation: .after(jQuery) (1)
461.manipulation: .after(Function) returns String (1)
462.manipulation: .after(Function) returns Element (1)
463.manipulation: .after(Function) returns Array<Element> (1)
464.manipulation: .after(Function) returns jQuery (1)
465.manipulation: .after(disconnected node) (2)
466.manipulation: insertAfter(String) (1)
467.manipulation: insertAfter(Element) (1)
468.manipulation: insertAfter(Array<Element>) (1)
469.manipulation: insertAfter(jQuery) (1)
470.manipulation: replaceWith(String|Element|Array<Element>|jQuery) (29)
471.manipulation: replaceWith(Function) (30)
472.manipulation: replaceWith(string) for more than one element (3)
473.manipulation: Empty replaceWith (trac-13401; trac-13596; gh-2204) (25)
474.manipulation: replaceAll(String) (2)
475.manipulation: replaceAll(Element) (2)
476.manipulation: replaceAll(Array<Element>) (3)
477.manipulation: replaceAll(jQuery) (3)
478.manipulation: jQuery.clone() (#8017) (2)
479.manipulation: append to multiple elements (#8070) (2)
480.manipulation: table manipulation (2)
481.manipulation: clone() (45)
482.manipulation: clone(script type=non-javascript) (#11359) (3)
483.manipulation: clone(form element) (Bug #3879, #6655) (5)
484.manipulation: clone(multiple selected options) (Bug #8129) (1)
485.manipulation: clone() on XML nodes (2)
486.manipulation: clone() on local XML nodes with html5 nodename (2)
487.manipulation: html(undefined) (1)
488.manipulation: html() on empty set (1)
489.manipulation: html(String|Number) (39)
490.manipulation: html(Function) (39)
491.manipulation: html( $.text() ) (1)
492.manipulation: html( fn ) returns $.text() (1)
493.manipulation: html(Function) with incoming value -- direct selection (4)
494.manipulation: html(Function) with incoming value -- jQuery.contents() (14)
495.manipulation: clone()/html() don't expose jQuery/Sizzle expandos (#12858) (2)
496.manipulation: remove() no filters (3)
497.manipulation: remove() with filters (8)
498.manipulation: remove() event cleaning  (1)
499.manipulation: remove() in document order #13779 (1)
500.manipulation: detach() no filters (3)
501.manipulation: detach() with filters (8)
502.manipulation: detach() event cleaning  (1)
503.manipulation: empty() (6)
504.manipulation: jQuery.cleanData (14)
505.manipulation: jQuery.cleanData eliminates all private data (gh-2127) (3)
506.manipulation: jQuery.cleanData eliminates all public data (2)
507.manipulation: domManip plain-text caching (trac-6779) (1)
508.manipulation: domManip executes scripts containing html comments or CDATA (trac-9221) (3)
509.manipulation: domManip tolerates window-valued document[0] in IE9/10 (trac-12266) (1)
510.manipulation: jQuery.clone - no exceptions for object elements #9587 (1)
511.manipulation: Cloned, detached HTML5 elems (#10667,10670) (7)
512.manipulation: Guard against exceptions when clearing safeChildNodes (1)
513.manipulation: Ensure oldIE creates a new set on appendTo (#8894) (5)
514.manipulation: html() - script exceptions bubble (#11743) (2)
515.manipulation: checked state is cloned with clone() (2)
516.manipulation: manipulate mixed jQuery and text (#12384, #12346) (2)
517.manipulation: script evaluation (#11795) (13)
518.manipulation: jQuery._evalUrl (#12838) (5)
519.manipulation: jQuery.htmlPrefilter (gh-1747) (5)
520.manipulation: insertAfter, insertBefore, etc do not work when destination is original element. Element is removed (#4087) (10)
521.manipulation: Index for function argument should be received (#13094) (2)
522.manipulation: Make sure jQuery.fn.remove can work on elements in documentFragment (1)
523.manipulation: Insert script with data-URI (gh-1887) (1)
524.wrap: wrap(String|Element) (19)
525.wrap: wrap(Function) (19)
526.wrap: wrap(Function) with index (#10177) (6)
527.wrap: wrap(String) consecutive elements (#10177) (12)
528.wrap: wrapAll(String) (5)
529.wrap: wrapAll(Element) (3)
530.wrap: wrapInner(String) (6)
531.wrap: wrapInner(Element) (5)
532.wrap: wrapInner(Function) returns String (6)
533.wrap: wrapInner(Function) returns Element (5)
534.wrap: unwrap() (9)
535.wrap: jQuery(<tag>) & wrap[Inner/All]() handle unknown elems (#10667) (2)
536.wrap: wrapping scripts (#10470) (2)
537.css: css(String|Hash) (43)
538.css: css() explicit and relative values (29)
539.css: css() non-px relative values (gh-1711) (16)
540.css: css(String, Object) (19)
541.css: css(String, Object) with negative values (4)
542.css: css(Array) (2)
543.css: css(String, Function) (3)
544.css: css(String, Function) with incoming value (3)
545.css: css(Object) where values are Functions (3)
546.css: css(Object) where values are Functions with incoming values (3)
547.css: show(); hide() (4)
548.css: show(); (18)
549.css: show() resolves correct default display #8099 (7)
550.css: show() resolves correct default display for detached nodes (13)
551.css: show() resolves correct default display #10227 (4)
552.css: show() resolves correct default display when iframe display:none #12904 (2)
553.css: toggle() (9)
554.css: hide hidden elements (bug #7141) (3)
555.css: jQuery.css(elem, 'height') doesn't clear radio buttons (bug #1095) (4)
556.css: internal ref to elem.runtimeStyle (bug #7608) (1)
557.css: computed margins (trac-3333; gh-2237) (2)
558.css: box model properties incorrectly returning % instead of px, see #10639 and #12088 (2)
559.css: jQuery.cssProps behavior, (bug #8402) (2)
560.css: widows & orphans #8936 (2)
561.css: can't get css for disconnected in IE<9, see #10254 and #8388 (2)
562.css: can't get background-position in IE<9, see #10796 (8)
563.css: percentage properties for bottom and right in IE<9 should not be incorrectly transformed to pixels, see #11311 (1)
564.css: percentage properties for left and top should be transformed to pixels, see #9505 (2)
565.css: Do not append px (#9548, #12990, #2792) (3)
566.css: css('width') and css('height') should respect box-sizing, see #11004 (4)
567.css: css('width') should work correctly before document ready (#14084) (1)
568.css: certain css values of 'normal' should be convertable to a number, see #8627 (3)
569.css: cssHooks - expand (15)
570.css: css opacity consistency across browsers (#12685) (4)
571.css: :visible/:hidden selectors (17)
572.css: Keep the last style if the new one isn't recognized by the browser (#14836) (2)
573.css: Reset the style if set to an empty string (1)
574.css: Clearing a Cloned Element's Style Shouldn't Clear the Original Element's Style (#8908) (24)
575.css: show() after hide() should always set display to initial value (#14750) (1)
576.css: Make sure initialized display value for disconnected nodes is correct (#13310) (4)
577.css: show() after hide() should always set display to initial value (#14750)  (1)
578.css: Don't append px to CSS "order" value (#14049) (1)
579.css: Do not throw on frame elements from css method (#15098) (1)
580.skippedcss: get upper case alpha opacity in IE8 (0)
581.css: Don't default to a cached previously used wrong prefixed name (gh-2015) (2)
582.css: Don't detect fake set properties on a node when caching the prefixed version (1)
583.serialize: jQuery.param() (23)
584.serialize: jQuery.param() Constructed prop values (4)
585.serialize: serialize() (6)
586.ajax: Unit Testing Environment (2)
587.ajax: XMLHttpRequest - Attempt to block tests because of dangling XHR requests (IE) (1)
588.ajax: jQuery.ajax() - success callbacks (8)
589.ajax: jQuery.ajax() - success callbacks - (url, options) syntax (8)
590.ajax: jQuery.ajax() - execute js for crossOrigin when dataType option is provided (3)
591.ajax: jQuery.ajax() - do not execute js (crossOrigin) (2)
592.ajax: jQuery.ajax() - success callbacks (late binding) (8)
593.ajax: jQuery.ajax() - success callbacks (oncomplete binding) (8)
594.ajax: jQuery.ajax() - error callbacks (8)
595.ajax: jQuery.ajax() - textStatus and errorThrown values (4)
596.ajax: jQuery.ajax() - responseText on error (1)
597.ajax: jQuery.ajax() - retry with jQuery.ajax( this ) (2)
598.ajax: jQuery.ajax() - headers (5)
599.ajax: jQuery.ajax() - Accept header (1)
600.ajax: jQuery.ajax() - contentType (2)
601.ajax: jQuery.ajax() - protocol-less urls (1)
602.ajax: jQuery.ajax() - hash (3)
603.ajax: jQuery.ajax() - cross-domain detection (7)
604.ajax: jQuery.ajax() - abort (9)
605.ajax: jQuery.ajax() - events with context (12)
606.ajax: jQuery.ajax() - events without context (3)
607.ajax: #15118 - jQuery.ajax() - function without jQuery.event (1)
608.ajax: #15160 - jQuery.ajax() - request manually aborted in ajaxSend (3)
609.ajax: jQuery.ajax() - context modification (1)
610.ajax: jQuery.ajax() - context modification through ajaxSetup (3)
611.ajax: jQuery.ajax() - disabled globals (3)
612.ajax: jQuery.ajax() - xml: non-namespace elements inside namespaced elements (3)
613.ajax: jQuery.ajax() - xml: non-namespace elements inside namespaced elements (over JSONP) (3)
614.ajax: jQuery.ajax() - HEAD requests (2)
615.ajax: jQuery.ajax() - beforeSend (1)
616.ajax: jQuery.ajax() - beforeSend, cancel request manually (2)
617.ajax: jQuery.ajax() - dataType html (5)
618.ajax: jQuery.ajax() - synchronous request (1)
619.ajax: jQuery.ajax() - synchronous request with callbacks (2)
620.ajax: jQuery.ajax(), jQuery.get[Script|JSON](), jQuery.post(), pass-through request object (8)
621.ajax: jQuery.ajax() - cache (12)
622.ajax: #8205 - jQuery.ajax() - JSONP - re-use callbacks name - Same Domain (4)
623.ajax: #8205 - jQuery.ajax() - JSONP - re-use callbacks name - Cross Domain (4)
624.ajax: jQuery.ajax() - script, Remote (2)
625.ajax: jQuery.ajax() - script, Remote with POST (3)
626.ajax: jQuery.ajax() - script, Remote with scheme-less URL (2)
627.ajax: jQuery.ajax() - malformed JSON (2)
628.ajax: jQuery.ajax() - script by content-type (2)
629.ajax: jQuery.ajax() - JSON by content-type (5)
630.ajax: jQuery.ajax() - JSON by content-type disabled with options (6)
631.ajax: jQuery.ajax() - simple get (1)
632.ajax: jQuery.ajax() - simple post (1)
633.ajax: jQuery.ajax() - data option - empty bodies for non-GET requests (1)
634.ajax: jQuery.ajax() - If-Modified-Since support (cache) (4)
635.ajax: jQuery.ajax() - Etag support (cache) (4)
636.ajax: jQuery.ajax() - If-Modified-Since support (no cache) (4)
637.ajax: jQuery.ajax() - Etag support (no cache) (4)
638.ajax: jQuery.ajax() - failing cross-domain (non-existing) (1)
639.ajax: jQuery.ajax() - failing cross-domain (1)
640.ajax: jQuery.ajax() - atom+xml (1)
641.ajax: jQuery.ajax() - statusText (3)
642.ajax: jQuery.ajax() - statusCode (20)
643.ajax: jQuery.ajax() - transitive conversions (8)
644.ajax: jQuery.ajax() - overrideMimeType (2)
645.ajax: jQuery.ajax() - empty json gets to error callback instead of success callback. (1)
646.ajax: #2688 - jQuery.ajax() - beforeSend, cancel request (2)
647.ajax: #2806 - jQuery.ajax() - data option - evaluate function values (1)
648.ajax: #7531 - jQuery.ajax() - Location object as url (1)
649.ajax: #7578 - jQuery.ajax() - JSONP - default for cache option - Same Domain (1)
650.ajax: #7578 - jQuery.ajax() - JSONP - default for cache option - Cross Domain (1)
651.ajax: #8107 - jQuery.ajax() - multiple method signatures introduced in 1.5 (4)
652.ajax: #9887 - jQuery.ajax() - Context with circular references (#9887) (2)
653.ajax: #10093 - jQuery.ajax() - falsy url as argument (4)
654.ajax: #10093 - jQuery.ajax() - falsy url in settings object (4)
655.ajax: #11151 - jQuery.ajax() - parse error body (2)
656.ajax: #11426 - jQuery.ajax() - loading binary data shouldn't throw an exception in IE (1)
657.ajax: #11743 - jQuery.ajax() - script, throws exception (1)
658.ajax: #12004 - jQuery.ajax() - method is an alias of type - method set globally (3)
659.ajax: #12004 - jQuery.ajax() - method is an alias of type - type set globally (3)
660.ajax: #13276 - jQuery.ajax() - compatibility between XML documents from ajax requests and parsed string (1)
661.ajax: #13292 - jQuery.ajax() - converter is bypassed for 204 requests (3)
662.ajax: #13388 - jQuery.ajax() - responseXML (3)
663.ajax: #13922 - jQuery.ajax() - converter is bypassed for HEAD requests (3)
664.ajax: #14379 - jQuery.ajax() on unload (1)
665.ajax: #13240 - jQuery.ajax() - support non-RFC2616 methods (1, 0, 1)
666.ajax: #14683 - jQuery.ajax() - Exceptions thrown synchronously by xhr.send should be caught (4)
667.ajax: gh-2587 - when content-type not xml, but looks like one (1)
668.ajax: gh-2587 - when content-type not xml, but looks like one  (1)
669.ajax: gh-2587 - when content-type not json, but looks like one (1)
670.ajax: gh-2587 - when content-type not html, but looks like one (1)
671.ajax: gh-2587 - when content-type not javascript, but looks like one (1)
672.ajax: gh-2587 - when content-type not ecmascript, but looks like one (1)
673.ajax: jQuery.ajaxPrefilter() - abort (1)
674.ajax: jQuery.ajaxSetup() (1)
675.ajax: jQuery.ajaxSetup({ timeout: Number }) - with global timeout (2)
676.ajax: jQuery.ajaxSetup({ timeout: Number }) with localtimeout (1)
677.ajax: #11264 - jQuery.domManip() - no side effect because of ajaxSetup or global events (1)
678.ajax: jQuery#load() - always use GET method even if it overrided through ajaxSetup (#11264) (1)
679.ajax: #11402 - jQuery.domManip() - script in comments are properly evaluated (2)
680.ajax: jQuery.get( String, Hash, Function ) - parse xml and use text() on nodes (2)
681.ajax: #8277 - jQuery.get( String, Function ) - data in ajaxSettings (1)
682.ajax: jQuery.getJSON( String, Hash, Function ) - JSON array (5)
683.ajax: jQuery.getJSON( String, Function ) - JSON object (2)
684.ajax: jQuery.getJSON( String, Function ) - JSON object with absolute url to local content (2)
685.ajax: jQuery.getScript( String, Function ) - with callback (2)
686.ajax: jQuery.getScript( String, Function ) - no callback (1)
687.ajax: #8082 - jQuery.getScript( String, Function ) - source as responseText (2)
688.ajax: jQuery.fn.load( String ) (2)
689.ajax: jQuery.fn.load() - 404 error callbacks (6)
690.ajax: jQuery.fn.load( String, null ) (2)
691.ajax: jQuery.fn.load( String, undefined ) (2)
692.ajax: jQuery.fn.load( URL_SELECTOR ) (1)
693.ajax: jQuery.fn.load( URL_SELECTOR with spaces ) (1)
694.ajax: jQuery.fn.load( String, Function ) - simple: inject text into DOM (2)
695.ajax: jQuery.fn.load( String, Function ) - check scripts (7)
696.ajax: jQuery.fn.load( String, Function ) - check file with only a script tag (3)
697.ajax: jQuery.fn.load( String, Function ) - dataFilter in ajaxSettings (2)
698.ajax: jQuery.fn.load( String, Object, Function ) (2)
699.ajax: jQuery.fn.load( String, String, Function ) (2)
700.ajax: jQuery.fn.load() - callbacks get the correct parameters (8)
701.ajax: #2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataType json (1)
702.ajax: #10524 - jQuery.fn.load() - data specified in ajaxSettings is merged in (1)
703.ajax: jQuery.post() - data (3)
704.ajax: jQuery.post( String, Hash, Function ) - simple with xml (4)
705.ajax: jQuery[get|post]( options ) - simple with xml (2)
706.ajax: jQuery.active (1)
707.effects: sanity check (1)
708.effects: show() basic (2)
709.effects: show() (27)
710.effects: show(Number) - other displays (15)
711.effects: Persist correct display value (3)
712.effects: animate(Hash, Object, Function) (1)
713.effects: animate relative values (12)
714.effects: animate negative height (1)
715.effects: animate negative margin (1)
716.effects: animate negative margin with px (1)
717.effects: animate negative padding (1)
718.effects: animate block as inline width/height (3)
719.effects: animate native inline width/height (3)
720.effects: animate block width/height (3)
721.effects: animate table width/height (1)
722.effects: animate table-row width/height (3)
723.effects: animate table-cell width/height (3)
724.effects: animate percentage(%) on width/height (2)
725.effects: animate resets overflow-x and overflow-y when finished (2)
726.effects: animate option { queue: false } (2)
727.effects: animate option { queue: true } (2)
728.effects: animate option { queue: 'name' } (5)
729.effects: animate with no properties (2)
730.effects: animate duration 0 (11)
731.effects: animate hyphenated properties (1)
732.effects: animate non-element (1)
733.effects: stop() (4)
734.effects: stop() - several in queue (5)
735.effects: stop(clearQueue) (4)
736.effects: stop(clearQueue, gotoEnd) (1)
737.effects: stop( queue, ..., ... ) - Stop single queues (3)
738.effects: toggle() (6)
739.effects: jQuery.fx.prototype.cur() - <1.8 Back Compat (7)
740.effects: Overflow and Display (4)
741.effects: CSS Auto to 0 (6)
742.effects: CSS Auto to 50 (6)
743.effects: CSS Auto to 100 (6)
744.effects: CSS Auto to show (5)
745.effects: CSS Auto to hide (4)
746.effects: JS Auto to 0 (6)
747.effects: JS Auto to 50 (6)
748.effects: JS Auto to 100 (6)
749.effects: JS Auto to show (5)
750.effects: JS Auto to hide (4)
751.effects: CSS 100 to 0 (6)
752.effects: CSS 100 to 50 (6)
753.effects: CSS 100 to 100 (6)
754.effects: CSS 100 to show (5)
755.effects: CSS 100 to hide (4)
756.effects: JS 100 to 0 (6)
757.effects: JS 100 to 50 (6)
758.effects: JS 100 to 100 (6)
759.effects: JS 100 to show (5)
760.effects: JS 100 to hide (4)
761.effects: CSS 50 to 0 (6)
762.effects: CSS 50 to 50 (6)
763.effects: CSS 50 to 100 (6)
764.effects: CSS 50 to show (5)
765.effects: CSS 50 to hide (4)
766.effects: JS 50 to 0 (6)
767.effects: JS 50 to 50 (6)
768.effects: JS 50 to 100 (6)
769.effects: JS 50 to show (5)
770.effects: JS 50 to hide (4)
771.effects: CSS 0 to 0 (6)
772.effects: CSS 0 to 50 (6)
773.effects: CSS 0 to 100 (6)
774.effects: CSS 0 to show (5)
775.effects: CSS 0 to hide (4)
776.effects: JS 0 to 0 (6)
777.effects: JS 0 to 50 (6)
778.effects: JS 0 to 100 (6)
779.effects: JS 0 to show (5)
780.effects: JS 0 to hide (4)
781.effects: Effects chaining (16)
782.effects: jQuery.show('fast') doesn't clear radio buttons (bug #1095) (4)
783.effects: interrupt toggle (24)
784.effects: animate with per-property easing (5)
785.effects: animate with CSS shorthand properties (11)
786.effects: hide hidden elements, with animation (bug #7141) (3)
787.effects: animate unit-less properties (#4966) (2)
788.effects: animate properties missing px w/ opacity as last (#9074) (6)
789.effects: callbacks should fire in correct order (#9100) (1)
790.effects: callbacks that throw exceptions will be removed (#5684) (2)
791.effects: animate will scale margin properties individually (2)
792.effects: Do not append px to 'fill-opacity' #9548 (1)
793.effects: line-height animates correctly (#13855) (12)
794.effects: jQuery.Animation( object, props, opts ) (4)
795.effects: Animate Option: step: function( percent, tween ) (1)
796.effects: Animate callbacks have correct context (2)
797.effects: User supplied callback called after show when fx off (#8892) (2)
798.effects: animate should set display for disconnected nodes (18)
799.effects: Animation callback should not show animated element as :animated (#7157) (1)
800.effects: Initial step callback should show element as :animated (#14623) (1)
801.effects: hide called on element within hidden parent should set display to none (#10045) (3)
802.effects: hide, fadeOut and slideUp called on element width height and width = 0 should set display to none (5)
803.effects: hide should not leave hidden inline elements visible (#14848) (2)
804.effects: Handle queue:false promises (10)
805.effects: multiple unqueued and promise (4)
806.effects: animate does not change start value for non-px animation (#7109) (1)
807.effects: non-px animation handles non-numeric start (#11971) (1)
808.effects: Animation callbacks (#11797) (16)
809.effects: Animate properly sets overflow hidden when animating width/height (#12117) (8)
810.effects: Each tick of the timer loop uses a fresh time (#12837) (3)
811.effects: Animations with 0 duration don't ease (#12273) (1)
812.effects: toggle state tests: toggle (#8685) (4)
813.effects: toggle state tests: slideToggle (#8685) (4)
814.effects: toggle state tests: fadeToggle (#8685) (4)
815.effects: jQuery.fx.start & jQuery.fx.stop hook points (3)
816.effects: .finish() completes all queued animations (11)
817.effects: .finish( false ) - unqueued animations (10)
818.effects: .finish( "custom" ) - custom queue animations (11)
819.effects: .finish() calls finish of custom queue functions (6)
820.effects: .finish() is applied correctly when multiple elements were animated (#13937) (3)
821.effects: slideDown() after stop() (#13483) (2)
822.effects: Respect display value on inline elements (#14824) (2)
823.offset: empty set (2)
824.offset: object without getBoundingClientRect (2)
825.offset: disconnected element (2)
826.offset: absolute (1, 3, 4)
827.offset: absolute  (178)
828.offset: relative (60)
829.offset: static (80)
830.offset: fixed (34)
831.offset: table (4)
832.offset: scroll (28)
833.offset: body (4)
834.offset: chaining (3)
835.offset: offsetParent (13)
836.offset: fractions (see #7730 and #7885) (2)
837.offset: iframe scrollTop/Left (see gh-1945) (2)
838.dimensions: width() (9)
839.dimensions: width(Function) (9)
840.dimensions: width(Function(args)) (2)
841.dimensions: height() (9)
842.dimensions: height(Function) (9)
843.dimensions: height(Function(args)) (2)
844.dimensions: innerWidth() (6)
845.dimensions: innerHeight() (6)
846.dimensions: outerWidth() (11)
847.dimensions: child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height() see #9441 #9300 (16)
848.dimensions: getting dimensions shouldn't modify runtimeStyle see #9233 (1)
849.dimensions: table dimensions (2)
850.dimensions: box-sizing:border-box child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height() see #10413 (16)
851.dimensions: outerHeight() (11)
852.dimensions: passing undefined is a setter #5571 (4)
853.dimensions: getters on non elements should return null (8)
854.dimensions: setters with and without box-sizing:border-box (20)
855.dimensions: window vs. small document (1)
856.dimensions: window vs. large document (2)
857.dimensions: allow modification of coordinates argument (gh-1848) (1)
